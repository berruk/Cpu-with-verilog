module not_gate(
input i_1,
output i_2
);
 
assign i_2=~i_1;
 
endmodule

module and_gate(i_1, i_2, o); 

input wire i_1; 
input wire i_2;
output wire o;
assign o = i_1 & i_2;

endmodule

module or_gate(i_1, i_2, o); 

input wire i_1; 
input wire i_2;
output wire o;
assign o = i_1 | i_2;

endmodule

module xor_gate(i_1, i_2, o); 

input wire i_1; 
input wire i_2;
logic x1,x2;
output wire o ;
  not_gate n1(i_1,x1);
  not_gate n2(i_2,x2);

  assign o = (x1 & i_2) | ( x2 & i_1);

endmodule

// Half adder
module halfadder(
  input a, 
  input b,
  output o,
  output c
);
  logic o1,o2;
  and_gate a1(a ,b ,o1);
  xor_gate a2(a ,b ,o2);

  assign o = o2;
  assign c = o1;

endmodule

// Full adder
module fulladder(
  input a,
  input b,
  input d,
  output o,
  output c
);

  logic t, c1, c2;

  halfadder ha1(a, b, t, c1);
  halfadder ha2(t, d, o, c2);

  assign c = c1 | c2;

endmodule

module bitfulladder(a,b,cin,s,cout);

  input wire [7:0] a;
  input wire [7:0] b;
input wire cin;
logic w1 ,w2 ,w3 ,w4 ,w5 ,w6, w7;

  output wire [7:0] s;
 output wire cout;
 fulladder F1(a[0],b[0],cin,s[0],w1);
  fulladder F2(a[1],b[1],w1,s[1],w2);
  fulladder F3(a[2],b[2],w2,s[2],w3);
  fulladder F4(a[3],b[3],w3,s[3],w4);
  fulladder F5(a[4],b[4],w4,s[4],w5);
  fulladder F6(a[5],b[5],w5,s[5],w6);
  fulladder F7(a[6],b[6],w6,s[6],w7);
  fulladder F8(a[7],b[7],w7,s[7],cout);



endmodule
