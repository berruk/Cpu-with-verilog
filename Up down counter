module dff ( q, clk, reset);

  output q;
  input clk, reset;
  
  reg q;
  always @(posedge reset or posedge clk) begin

    if (reset ) begin
      q <= 1'b0;
    end else begin
      q <= ~q;

    end
  end
endmodule

module up_down_counter (q, x, clk, reset);
	
  output [1:0] q;
  input x, clk, reset;

  dff dff0(q[0], clk, reset);
  dff dff1(q[1], q[0]^x, reset);
  
endmodule

module bitupdown(input clk, reset,up_down, input[15:0] I, input load,output[15:0]  counter
    );
  reg [15:0] counter_up_down;

always @(posedge clk or posedge reset)
begin
  if(reset )
 counter_up_down <= 4'h0;
else if(~load) 
  counter_up_down <= I;
else if(load)  
		if(~up_down)
    		counter_up_down <= counter_up_down - 4'd1;
		else 
    		counter_up_down <= counter_up_down + 4'd1;
end 
assign counter = counter_up_down;
endmodule
